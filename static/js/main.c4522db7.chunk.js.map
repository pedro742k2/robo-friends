{"version":3,"sources":["serviceWorkerRegistration.js","assets/Images/c3po.svg","Services/RobotsApi.js","Containers/CardsSection/Copied/Copied.js","Containers/CardsSection/RobotsInfo/RobotsInfo.js","Containers/CardsSection/CardsSection.js","Containers/Footer/Footer.js","Containers/Header/Header.js","Components/Scroll/Scroll.js","Components/ErrorBoundry/ErrorBoundry.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Robots","Promise","resolve","reject","fetch","response","json","resolvedPromise","warn","Copied","resetState","copiedText","useEffect","id","setTimeout","clearTimeout","container","document","getElementsByClassName","style","display","length","className","RobotsInfo","show","robotInfo","closeAllInfo","useState","setCopiedText","name","username","email","phone","latLng","address","geo","opacity","copyToClipboard","text","a","clipboard","writeText","copyContent","event","property","currentTarget","lat","lng","propertyToCopy","Object","entries","filter","robotProperty","onClick","CardsSection","robotsInput","robots","setRobots","showRobotInfo","setShowRobotInfo","resolvedRobots","showAllInfo","robotForInfo","robot","Number","newRobots","toLowerCase","trim","includes","map","filteredRobot","newIndex","alt","src","c3poImg","filterRobots","Footer","Header","changeRobotsInputValue","type","placeholder","onChange","Scroll","children","ErrorBoundry","hasError","info","this","setState","props","Component","App","setRobotsInput","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c4522db7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/c3po.5c6660bd.svg\";","const api = \"https://jsonplaceholder.typicode.com/users\";\n\nconst Robots = new Promise((resolve, reject) => {\n  fetch(api)\n    .then((response) => response.json())\n    .then(resolve)\n    .catch(reject);\n})\n  .then((resolvedPromise) => resolvedPromise)\n  .catch(console.warn);\n\nexport default Robots;\n","import { Fragment, useEffect } from \"react\";\nimport \"./Copied.css\";\n\nconst Copied = ({ resetState, copiedText }) => {\n  useEffect(() => {\n    /* Clear every timeout available before unmounting*/\n    let id = window.setTimeout(function () {}, 0);\n\n    while (id--) {\n      window.clearTimeout(id);\n    }\n\n    try {\n      const container = document.getElementsByClassName(\n        \"successfully-copied-container\"\n      )[0];\n\n      container.style.display = \"flex\";\n\n      setTimeout(() => {\n        container.style.display = \"none\";\n      }, 5000);\n    } catch {\n      console.warn(\"Nothing to clear\");\n    }\n  });\n\n  useEffect(() => {\n    try {\n      const container = document.getElementsByClassName(\n        \"successfully-copied-container\"\n      )[0];\n\n      container.style.display = \"flex\";\n\n      setTimeout(() => {\n        container.style.display = \"none\";\n      }, 5000);\n    } catch {\n      console.warn(\"Nothing to clear\");\n    }\n\n    return () => resetState();\n  }, []);\n\n  console.log(copiedText);\n\n  return (\n    <Fragment>\n      {copiedText.length ? (\n        <div className=\"successfully-copied-container\">\n          <p>\n            <span>Copied </span>\n            <b>{copiedText}</b>\n          </p>\n        </div>\n      ) : null}\n    </Fragment>\n  );\n};\n\nexport default Copied;\n","import { useState, Fragment } from \"react\";\nimport \"./RobotsInfo.css\";\n\n/* Successfully Copied Component */\nimport SuccessfullyCopied from \"../Copied/Copied\";\n\nconst RobotsInfo = ({ show, robotInfo, closeAllInfo }) => {\n  const [copiedText, setCopiedText] = useState(\"\");\n\n  const { id, name, username, email, phone } = robotInfo;\n  const latLng = robotInfo?.address?.geo;\n\n  try {\n    show\n      ? (document.getElementsByClassName(\"app-section\")[0].style.opacity = 0.2)\n      : (document.getElementsByClassName(\"app-section\")[0].style.opacity = 1);\n  } catch (error) {\n    console.warn(error);\n  }\n\n  const copyToClipboard = async (text) => {\n    await navigator.clipboard.writeText(text);\n  };\n\n  const resetState = () => {\n    console.log(\"Unmounting\");\n    let id = window.setTimeout(function () {}, 0);\n\n    while (id--) {\n      window.clearTimeout(id);\n    }\n    setCopiedText(\"\");\n  };\n\n  const copyContent = (event) => {\n    const property = event.currentTarget.id;\n\n    if (\n      property === \"geo-lat\" ||\n      property === \"geo-lng\" ||\n      property === \"all\"\n    ) {\n      switch (property) {\n        case \"geo-lat\":\n          copyToClipboard(`latitude: ${latLng.lat}`);\n          setCopiedText(\"latitude\");\n          break;\n        case \"geo-lng\":\n          copyToClipboard(`longitude: ${latLng.lng}`);\n          setCopiedText(\"longitude\");\n          break;\n        default:\n          copyToClipboard(\n            `id: ${id}\\nname: ${name}\\nusername: ${username}\\nemail: ${email}\\nlatitude: ${latLng.lat}\\nlongitude: ${latLng.lng}\\nphone: ${phone}`\n          );\n          setCopiedText(\"Every information\");\n      }\n    } else {\n      const propertyToCopy = Object.entries(robotInfo).filter(\n        (robotProperty) => {\n          return property === robotProperty[0];\n        }\n      );\n\n      copyToClipboard(`${propertyToCopy[0][0]}: ${propertyToCopy[0][1]}`);\n      setCopiedText(propertyToCopy[0][0]);\n    }\n  };\n\n  return (\n    <Fragment>\n      {show ? (\n        <div className=\"overlay\">\n          <div className=\"info-container\">\n            <div className=\"info-boxes-container\">\n              <div id=\"id\" className=\"info-box\" onClick={copyContent}>\n                <h2>ID</h2>\n                <hr />\n                <p>{id}</p>\n              </div>\n\n              <div id=\"name\" className=\"info-box\" onClick={copyContent}>\n                <h2>Name</h2>\n                <hr />\n                <p>{name}</p>\n              </div>\n\n              <div id=\"username\" className=\"info-box\" onClick={copyContent}>\n                <h2>Username</h2>\n                <hr />\n                <p>{username}</p>\n              </div>\n\n              <div id=\"email\" className=\"info-box\" onClick={copyContent}>\n                <h2>Email</h2>\n                <hr />\n                <p>{email}</p>\n              </div>\n\n              <div id=\"geo-lat\" className=\"info-box\" onClick={copyContent}>\n                <h2>Geolocation (Latitude)</h2>\n                <hr />\n                <p>{latLng?.lat}</p>\n              </div>\n\n              <div id=\"geo-lng\" className=\"info-box\" onClick={copyContent}>\n                <h2>Geolocation (Longitude)</h2>\n                <hr />\n                <p>{latLng?.lng}</p>\n              </div>\n\n              <div id=\"phone\" className=\"info-box\" onClick={copyContent}>\n                <h2>Phone</h2>\n                <hr />\n                <p>{phone}</p>\n              </div>\n\n              <div id=\"all\" className=\"info-box\" onClick={copyContent}>\n                <h2>\n                  {\"< \"}Click to copy{\" >\"}\n                </h2>\n                <hr />\n                <p>Or click here to copy everything</p>\n              </div>\n            </div>\n\n            <button onClick={closeAllInfo}>Close this box</button>\n          </div>\n\n          <SuccessfullyCopied copiedText={copiedText} resetState={resetState} />\n        </div>\n      ) : null}\n    </Fragment>\n  );\n};\n\nexport default RobotsInfo;\n","import { Fragment, useState, useEffect } from \"react\";\nimport \"./CardsSection.css\";\nimport c3poImg from \"../../assets/Images/c3po.svg\";\n\n/* Robots api */\nimport Robots from \"../../Services/RobotsApi\";\n\n/* Robots Info overlay */\nimport RobotsInfo from \"./RobotsInfo/RobotsInfo\";\n\nconst CardsSection = ({ robotsInput }) => {\n  const [robots, setRobots] = useState([]);\n  const [showRobotInfo, setShowRobotInfo] = useState({\n    show: false,\n    robotInfo: [],\n  });\n\n  useEffect(() => {\n    Robots.then((resolvedRobots) => setRobots(resolvedRobots));\n  }, []);\n\n  const showAllInfo = (event) => {\n    const robotForInfo = robots.filter((robot) => {\n      return robot.id === Number(event.currentTarget.id);\n    });\n\n    robotForInfo.length\n      ? setShowRobotInfo({\n          show: true,\n          robotInfo: robotForInfo[0],\n        })\n      : setShowRobotInfo({\n          show: true,\n          robotInfo: {\n            id: \"Not identified\",\n            name: \"C3PO\",\n            username: \"Search Admin\",\n            email: \"c3p0@robosearchadmin.rf\",\n            address: {\n              geo: {\n                lat: \"Somewhere in the galaxy\",\n                lng: \"Somewhere in the galaxy\",\n              },\n            },\n            phone: \"Private number\",\n          },\n        });\n  };\n\n  const closeAllInfo = () => {\n    setShowRobotInfo({\n      show: false,\n      robotInfo: [],\n    });\n  };\n\n  const filterRobots = () => {\n    const newRobots = robots.filter((robot) =>\n      robot.name.toLowerCase().trim().includes(robotsInput.toLowerCase().trim())\n    );\n\n    return newRobots.length > 0 ? (\n      <section className=\"app-section\">\n        {newRobots.map((filteredRobot, newIndex) => (\n          <div\n            id={filteredRobot.id}\n            className=\"robot-card\"\n            key={newIndex}\n            onClick={showAllInfo}\n          >\n            <img\n              className=\"card-img\"\n              alt=\"\"\n              src={`https://robohash.org/${filteredRobot.id}`}\n            />\n            <h1>{filteredRobot.name}</h1>\n            <p>{filteredRobot.email}</p>\n          </div>\n        ))}\n      </section>\n    ) : (\n      <section className=\"app-section\">\n        <div className=\"robot-card no-robots\" onClick={showAllInfo}>\n          <img className=\"card-img\" alt=\"\" src={c3poImg} />\n          <h1>Looks like no robots were found</h1>\n          <p>My circuits may be failing</p>\n        </div>\n      </section>\n    );\n  };\n\n  return (\n    <Fragment>\n      <RobotsInfo\n        show={showRobotInfo.show}\n        robotInfo={showRobotInfo.robotInfo}\n        closeAllInfo={closeAllInfo}\n      />\n      {filterRobots()}\n    </Fragment>\n  );\n};\n\nexport default CardsSection;\n","import \"./Footer.css\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"app-footer\">\n      <h1>\n        This web app was developed by <span id=\"signature\">Pedro Batista</span>\n      </h1>\n      <p>\n        Based on <i>\"Zero To Mastery\"</i> Web Development course{\" \"}\n        <i>\"Robofriends\"</i> App\n      </p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import \"./Header.css\";\n\nconst Header = ({ changeRobotsInputValue }) => {\n  return (\n    <header className=\"app-header\">\n      <h1 className=\"header-title\">ROBOFRIENDS</h1>\n      <input\n        className=\"robots-name-input\"\n        type=\"text\"\n        placeholder=\"Search robots 🤖\"\n        onChange={changeRobotsInputValue}\n      ></input>\n    </header>\n  );\n};\n\nexport default Header;\n","import \"./Scroll.css\";\n\nconst Scroll = ({ children }) => {\n  return <div className=\"scroll-component\">{children}</div>;\n};\n\nexport default Scroll;\n","import { Component } from \"react\";\nimport \"./ErrorBoundry.css\";\n\nclass ErrorBoundry extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError)\n      return (\n        <div className=\"error-boundry-box\">\n          <h1>\n            That's not good...\n            <br /> Looks like you're offline\n          </h1>\n        </div>\n      );\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import { useState } from \"react\";\nimport \"./App.css\";\n\n/* Containers */\nimport CardsSection from \"./CardsSection/CardsSection\";\nimport Footer from \"./Footer/Footer\";\nimport Header from \"./Header/Header\";\n\n/* Components */\nimport Scroll from \"../Components/Scroll/Scroll\";\nimport ErrorBoundry from \"../Components/ErrorBoundry/ErrorBoundry\";\n\nconst App = () => {\n  const [robotsInput, setRobotsInput] = useState(\"\");\n\n  const changeRobotsInputValue = (text) => setRobotsInput(text.target.value);\n\n  return (\n    <div className=\"App\">\n      <Header changeRobotsInputValue={changeRobotsInputValue} />\n      <Scroll>\n        <ErrorBoundry>\n          <CardsSection robotsInput={robotsInput} />\n        </ErrorBoundry>\n      </Scroll>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./Containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"animate.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}