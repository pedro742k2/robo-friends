{"version":3,"sources":["serviceWorkerRegistration.js","Services/RobotsApi.js","assets/Images/c3po.svg","Containers/CardsSection/CardsSection.js","Containers/Footer/Footer.js","Containers/Header/Header.js","Components/Scroll/Scroll.js","Components/ErrorBoundry/ErrorBoundry.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Robots","Promise","resolve","reject","fetch","response","json","resolvedPromise","warn","CardsSection","robotsInput","useState","setRobots","show","robotInfo","useEffect","resolvedRobots","Error","Footer","className","id","Header","changeRobotsInputValue","type","placeholder","onChange","Scroll","children","ErrorBoundry","hasError","info","this","setState","props","Component","App","setRobotsInput","text","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"iVAYMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,WCnFlDC,G,YCXA,IDEA,IAAIC,SAAQ,SAACC,EAASC,GACnCC,MAHU,8CAIPlB,MAAK,SAACmB,GAAD,OAAcA,EAASC,UAC5BpB,KAAKgB,GACLJ,MAAMK,MAERjB,MAAK,SAACqB,GAAD,OAAqBA,KAC1BT,MAAMJ,QAAQc,O,+BEgGFC,EA/FM,SAAC,GAAoB,EAAlBC,YAAmB,IACzC,EAA4BC,mBAAS,IAArC,mBAAeC,GAAf,WACA,EAA0CD,mBAAS,CACjDE,MAAM,EACNC,UAAW,KAFb,6BAKAC,qBAAU,WACRf,EAAOd,MAAK,SAAC8B,GAAD,OAAoBJ,EAAUI,QACzC,IAwEH,MAAMC,MAAM,UC3ECC,G,MAdA,WACb,OACE,yBAAQC,UAAU,aAAlB,UACE,gEACgC,sBAAMC,GAAG,YAAT,8BAEhC,0CACW,kDADX,0BAC2D,IACzD,8CAFF,eCQSC,G,MAdA,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,uBAChB,OACE,yBAAQH,UAAU,aAAlB,UACE,oBAAIA,UAAU,eAAd,yBACA,uBACEA,UAAU,oBACVI,KAAK,OACLC,YAAY,6BACZC,SAAUH,SCJHI,G,MAJA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OAAO,qBAAKR,UAAU,mBAAf,SAAmCQ,M,6BC4B7BC,G,wDA3Bb,aAAe,IAAD,8BACZ,gBAEKpC,MAAQ,CACXqC,UAAU,GAJA,E,qDAQd,SAAkB9B,EAAO+B,GACvBC,KAAKC,SAAS,CAAEH,UAAU,M,oBAG5B,WACE,OAAIE,KAAKvC,MAAMqC,SAEX,qBAAKV,UAAU,oBAAf,SACE,oDAEE,uBAFF,kCAOCY,KAAKE,MAAMN,a,GAxBKO,cC4BZC,EAnBH,WACV,MAAsCxB,mBAAS,IAA/C,mBAAOD,EAAP,KAAoB0B,EAApB,KAIA,OACE,sBAAKjB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQG,uBAJmB,SAACe,GAAD,OAAUD,EAAeC,EAAKC,OAAOC,UAKhE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAc7B,YAAaA,QAI/B,cAAC,EAAD,QCdS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxD,MAAK,YAAkD,IAA/CyD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SVQnB,SAAkBtE,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsE,IAAIC,gBAAwB9E,OAAOC,SAAS8E,MACpDC,SAAWhF,OAAOC,SAAS+E,OAIvC,OAGFhF,OAAOiF,iBAAiB,QAAQ,WAC9B,IAAM5E,EAAK,UAAMyE,gBAAN,sBAEPhF,IAgEV,SAAiCO,EAAOC,GAEtCsB,MAAMvB,EAAO,CACX6E,QAAS,CAAE,iBAAkB,YAE5BxE,MAAK,SAACmB,GAEL,IAAMsD,EAActD,EAASqD,QAAQE,IAAI,gBAEnB,MAApBvD,EAASwD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/E,UAAUC,cAAc+E,MAAM7E,MAAK,SAACC,GAClCA,EAAa6E,aAAa9E,MAAK,WAC7BV,OAAOC,SAASwF,eAKpBrF,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVuE,CAAwBrF,EAAOC,GAI/BC,UAAUC,cAAc+E,MAAM7E,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OUjC/BqF,GAKA3B,M","file":"static/js/main.60474036.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const api = \"https://jsonplaceholder.typicode.com/users\";\n\nconst Robots = new Promise((resolve, reject) => {\n  fetch(api)\n    .then((response) => response.json())\n    .then(resolve)\n    .catch(reject);\n})\n  .then((resolvedPromise) => resolvedPromise)\n  .catch(console.warn);\n\nexport default Robots;\n","export default __webpack_public_path__ + \"static/media/c3po.5c6660bd.svg\";","import { Fragment, useState, useEffect } from \"react\";\nimport \"./CardsSection.css\";\nimport c3poImg from \"../../assets/Images/c3po.svg\";\n\n/* Robots api */\nimport Robots from \"../../Services/RobotsApi\";\n\n/* Robots Info overlay */\nimport RobotsInfo from \"./RobotsInfo/RobotsInfo\";\n\nconst CardsSection = ({ robotsInput }) => {\n  const [robots, setRobots] = useState([]);\n  const [showRobotInfo, setShowRobotInfo] = useState({\n    show: false,\n    robotInfo: [],\n  });\n\n  useEffect(() => {\n    Robots.then((resolvedRobots) => setRobots(resolvedRobots));\n  }, []);\n\n  const showAllInfo = (event) => {\n    const robotForInfo = robots.filter((robot) => {\n      return robot.id === Number(event.currentTarget.id);\n    });\n\n    robotForInfo.length\n      ? setShowRobotInfo({\n          show: true,\n          robotInfo: robotForInfo[0],\n        })\n      : setShowRobotInfo({\n          show: true,\n          robotInfo: {\n            id: \"Not identified\",\n            name: \"C3PO\",\n            username: \"Search Admin\",\n            email: \"c3p0@robosearchadmin.rf\",\n            address: {\n              geo: {\n                lat: \"Somewhere in the galaxy\",\n                lng: \"Somewhere in the galaxy\",\n              },\n            },\n            phone: \"Private number\",\n          },\n        });\n  };\n\n  const closeAllInfo = () => {\n    setShowRobotInfo({\n      show: false,\n      robotInfo: [],\n    });\n  };\n\n  const filterRobots = () => {\n    const newRobots = robots.filter((robot) =>\n      robot.name.toLowerCase().trim().includes(robotsInput.toLowerCase().trim())\n    );\n\n    return newRobots.length > 0 ? (\n      <section className=\"app-section\">\n        {newRobots.map((filteredRobot, newIndex) => (\n          <div\n            id={filteredRobot.id}\n            className=\"robot-card\"\n            key={newIndex}\n            onClick={showAllInfo}\n          >\n            <img\n              className=\"card-img\"\n              alt=\"\"\n              src={`https://robohash.org/${filteredRobot.id}`}\n            />\n            <h1>{filteredRobot.name}</h1>\n            <p>{filteredRobot.email}</p>\n          </div>\n        ))}\n      </section>\n    ) : (\n      <section className=\"app-section\">\n        <div className=\"robot-card no-robots\" onClick={showAllInfo}>\n          <img className=\"card-img\" alt=\"\" src={c3poImg} />\n          <h1>Looks like no robots were found</h1>\n          <p>My circuits may be failing</p>\n        </div>\n      </section>\n    );\n  };\n\n  throw Error(\"teste\");\n\n  return (\n    <Fragment>\n      <RobotsInfo\n        show={showRobotInfo.show}\n        robotInfo={showRobotInfo.robotInfo}\n        closeAllInfo={closeAllInfo}\n      />\n      {filterRobots()}\n    </Fragment>\n  );\n};\n\nexport default CardsSection;\n","import \"./Footer.css\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"app-footer\">\n      <h1>\n        This web app was developed by <span id=\"signature\">Pedro Batista</span>\n      </h1>\n      <p>\n        Based on <i>\"Zero To Mastery\"</i> Web Development course{\" \"}\n        <i>\"Robofriends\"</i> App\n      </p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import \"./Header.css\";\n\nconst Header = ({ changeRobotsInputValue }) => {\n  return (\n    <header className=\"app-header\">\n      <h1 className=\"header-title\">ROBOFRIENDS</h1>\n      <input\n        className=\"robots-name-input\"\n        type=\"text\"\n        placeholder=\"Search robots 🤖\"\n        onChange={changeRobotsInputValue}\n      ></input>\n    </header>\n  );\n};\n\nexport default Header;\n","import \"./Scroll.css\";\n\nconst Scroll = ({ children }) => {\n  return <div className=\"scroll-component\">{children}</div>;\n};\n\nexport default Scroll;\n","import { Component } from \"react\";\nimport \"./ErrorBoundry.css\";\n\nclass ErrorBoundry extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError)\n      return (\n        <div className=\"error-boundry-box\">\n          <h1>\n            That's not good...\n            <br /> Looks like you're offline\n          </h1>\n        </div>\n      );\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import { useState } from \"react\";\nimport \"./App.css\";\n\n/* Containers */\nimport CardsSection from \"./CardsSection/CardsSection\";\nimport Footer from \"./Footer/Footer\";\nimport Header from \"./Header/Header\";\n\n/* Components */\nimport Scroll from \"../Components/Scroll/Scroll\";\nimport ErrorBoundry from \"../Components/ErrorBoundry/ErrorBoundry\";\n\nconst App = () => {\n  const [robotsInput, setRobotsInput] = useState(\"\");\n\n  const changeRobotsInputValue = (text) => setRobotsInput(text.target.value);\n\n  return (\n    <div className=\"App\">\n      <Header changeRobotsInputValue={changeRobotsInputValue} />\n      <Scroll>\n        <ErrorBoundry>\n          <CardsSection robotsInput={robotsInput} />\n        </ErrorBoundry>\n      </Scroll>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./Containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"animate.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}